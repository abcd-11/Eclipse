package stack_using_2_queues;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Queue;

public class Stack_using_2_Queues {
		static Queue<Integer> q1= new LinkedList<Integer>();
		static Queue<Integer> q2= new LinkedList<Integer>();
		static String active;
		static int cn=0;
		public static void main(String args[])
		{    active="q1";
			Scanner sc=new Scanner(System.in);
			while(true)
			{
				System.out.println("Enter 1:push 2:pop 3:peek 4:Exit");
				int n=Integer.parseInt(sc.nextLine());
				if(n==4)
					break;
				switch(n)
				{
				case 1:
					{
					   System.out.println("Enter the element to be pushed::");
					   int key=Integer.parseInt(sc.nextLine());
					   cn++;
					   push(key);
					   break;
					}
				case 2:
					{
					   pop();
					   cn--;
					   break;
					}
				case 3:
					{
					   peek();
					   break;
					}
				}
			}
		}
		public static void push(int key)
		{
			System.out.println("I am in the push method");
			System.out.println(active);
			if(active.equals(q1))
					q1.add(key);
			else
				   q2.add(key);
		}
		public static void pop()
		{  int temp=cn;
		    System.out.println(cn);
		System.out.println("I am in the pop method");
		   if(active == q1)
			{    
				while(temp!=1)
				{  System.out.println("cn");
					q2.add(q1.remove());
					System.out.println(q2.peek());
					temp--;
				}
				System.out.printf("Dequeued element is::%d",q1.remove());
				active="q2";
			}
			else if(active.equals(q2))
			{
				while(temp!=1)
				{
					q1.add(q2.remove());
					temp--;
				}
				System.out.printf("Dequeued element is::%d",q2.remove());
				active="q1";
			}
		}
		public static void peek()
		{ int temp=cn;
		System.out.println("I am in the peek method");
			if(active.equals(q1))
			{
				while(temp!=1)
				{
					q2.add(q1.remove());
					temp--;
				}
				System.out.printf("The top element of the stack is::%d",q1.peek());
				q2.add(q1.remove());
			}
			else if(active.equals(q2))
			{
				while(temp!=1)
				{
					q1.add(q2.remove());
					temp--;
				}
				System.out.printf("The top element of the stack is::%d",q2.peek());
				q1.add(q2.remove());
			}
		}
}
